---
- name: Prep instances (sudo)
  hosts: tag_kubernetes
  gather_facts: no
  become: yes
  tasks:

    - name: Configure kubernetes repo
      template:
        src: templates/kubernetes.repo
        dest:  /etc/yum.repos.d/kubernetes.repo

    - name: Install deps
      package:
        name: "{{ item }}"
        state: latest
      with_items:
        - epel-release
        - nfs-utils
        # - nfs-utils-lib
        - python-pip
        - git
        - lsof
        - htop
        - bridge-utils
        - docker
        - kubelet-1.11.3
        - kubeadm-1.11.3
        - kubectl
        - go

    - name: Enable and restart services
      systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: yes
        enabled: True
      with_items:
        - kubelet
        - docker

    - name: Disable firewall
      systemd:
        name: firewalld
        state: stopped
        daemon_reload: yes
        enabled: false

    - name: Create directory for stackdriver creds
      shell: mkdir -p /etc/google/auth/

    - name: Upload stackdriver creds
      copy:
        src: tmp/stackdriversakey.json
        dest: /etc/google/auth/application_default_credentials.json
        force: no

    - name: install stackdriver agent
      shell: "curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh && bash install-monitoring-agent.sh"

    - name: Configure kernel options
      template:
        src: templates/sysctl-k8s.conf
        dest:  /etc/sysctl.d/k8s.conf

    - name: Finishing up
      shell: "{{ item }}"
      with_items:
      - setenforce 0
      - sysctl --system
      - iptables -F

    - name: Finishing up
      shell: "{{ item }}"
      with_items:
        - setenforce 0

    - name: Download weave CLI utility
      shell: curl -L git.io/weave -o /usr/bin/weave && chmod a+x /usr/bin/weave

- name: Set up K8S Master
  hosts: tag_kubernetescontrollers
  gather_facts: no
  become: yes
  tasks:

    - name: Initialize k8s master
      shell: kubeadm init --kubernetes-version stable-1.11 --apiserver-cert-extra-sans k8s.networkreliability.engineering
      register: output_init
      ignore_errors: yes

    - name: debug output_init
      debug:
        msg: "{{ output_init }}"

    - name: pause to let services finish starting
      pause:
        seconds: 30
      
    - name: get master token
      shell: kubeadm token list |grep "The default bootstrap token generated by 'kubeadm init'." |awk '{print $1}'
      register: output

    - name: set master token
      set_fact:
        mastertoken: "{{ output.stdout }}"

    - name: show master token
      debug:
        msg: "{{ output }}"

    - name: Get kube config file
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: tmp/kubeconfig
        flat: yes

# - name: Initialize NFS share
#   hosts: tag_kubernetesworkers[0]
#   gather_facts: no
#   become: yes
#   tasks:
#   - name: Initialize NFS share
#     shell: mkdir -p /mnt/nfs/home && mount nfs.labs.networkreliability.engineering:/influxdata /mnt/nfs/home && chmod 777 /mnt/nfs/home && umount /mnt/nfs/home

- name: Set up K8S Workers
  hosts: tag_kubernetesworkers
  gather_facts: no
  become: yes
  tasks:

  - name: docker info for getting cgroup driver
    shell: docker info 2>/dev/null |grep "Cgroup Driver" |awk '{print $3}'
    register: docker_info

  - name: get cgroup driver
    set_fact:
      cgroup_driver: "{{ docker_info.stdout }}"

  - name: set cgroup driver to cgroupfs
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      regexp: '^Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=.*"'
      line: 'Environment="KUBELET_CGROUP_ARGS=--cgroup-driver={{ cgroup_driver }}"'

  - name: Upload kubeconfig
    copy:
      src: tmp/kubeconfig
      dest: /etc/kubernetes/node-kubeconfig.yaml
      force: no

  - name: Create CNI directory	
    file:	
      path: /etc/cni/net.d/	
      state: directory	
  
  # Important that we specify a priority of 1 as most other plugins will try to generate	
  # their own conf files at a priority of 10	
  - name: Install multus CNI config	
    template:	
      src: templates/multus-cni.conf	
      dest:  /etc/cni/net.d/1-multus-cni.conf

  - name: enable kubelet service
    systemd:
      name: kubelet
      state: restarted
      daemon_reload: yes
      enabled: True

  # IP is internal TCP LB
  - name: join k8s cluster
    shell: "kubeadm join --token {{ hostvars[groups['tag_kubernetescontrollers'] | first].mastertoken }} --discovery-token-unsafe-skip-ca-verification 10.138.0.254:6443"
    ignore_errors: yes

- name: Clone antidote repo
  hosts: tag_kubernetes
  gather_facts: no
  tasks:

    - name: Remove antidote repo
      shell: rm -rf ~/antidote

    - name: Clone antidote repo to instance
      git:
        repo: 'https://github.com/nre-learning/antidote'
        dest: ~/antidote/
        force: yes

- name: Make local changes
  hosts: 127.0.0.1
  connection: local
  gather_facts: no
  tasks:

  - name: Check that mastertoken.txt exists
    stat:
      path: tmp/mastertoken.txt
    register: stat_result

  - copy: content="{{ hostvars[groups['tag_kubernetescontrollers'] | first].mastertoken }}" dest=tmp/mastertoken.txt
    when: stat_result.stat.exists == False

  - name: moving kubeconfig
    shell: cp tmp/kubeconfig ~/.kube/config

